name: Build

on:
  push:
    branches: [ workflows-test ]
  pull_request:
    branches: [ master ]

jobs:
  build-native:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install CMake
        uses: lukka/get-cmake@latest

      - name: Build Native Library
        shell: bash
        run: |
          cd src/main/native
          mkdir build
          cd build
          cmake ..
          cmake --build . --config Release

      - name: Determine OS Name
        id: os-name
        run: |
          OS_NAME=$(echo "${{ runner.os }}" | tr '[:upper:]' '[:lower:]')
          echo "os=$OS_NAME" >> $GITHUB_OUTPUT

      - name: Copy Native Library
        shell: bash
        run: |
          mkdir -p target/native/${{ steps.os-name.outputs.os }}
          LIB_NAME="native"
          if [ "${{ runner.os }}" = "Windows" ]; then
            LIB_EXT="dll"
            LIB_PATH="src/main/native/build/Release/$LIB_NAME.$LIB_EXT"
          elif [ "${{ runner.os }}" = "macOS" ]; then
            LIB_EXT="dylib"
            LIB_PATH="src/main/native/build/lib$LIB_NAME.$LIB_EXT"
          else
            LIB_EXT="so"
            LIB_PATH="src/main/native/build/lib$LIB_NAME.$LIB_EXT"
          fi
          cp "$LIB_PATH" "target/native/${{ steps.os-name.outputs.os }}/"

      - name: Upload Native Artifact
        uses: actions/upload-artifact@v3
        with:
          name: native-${{ steps.os-name.outputs.os }}
          path: target/native/${{ steps.os-name.outputs.os }}

  package-jar:
    needs: build-native
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Combine Native Libraries
        shell: bash
        run: |
          mkdir -p target/native
          find artifacts -type d -name 'native-*' | while read dir; do
            os=$(basename "$dir" | cut -d '-' -f2)
            mkdir -p "target/native/$os"
            cp -r "$dir"/* "target/native/$os/"
          done

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build JAR
        run: mvn package -DskipTests

      - name: Upload JAR Artifact
        uses: actions/upload-artifact@v3
        with:
          name: application.jar
          path: target/*.jar
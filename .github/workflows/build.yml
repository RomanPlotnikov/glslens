name: Build and Package

on:
  push:
    branches: [ workflows-test ]
  pull_request:
    branches: [ main ]

jobs:
  build-native:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache CMake build
        uses: actions/cache@v4
        with:
          path: src/main/native/build
          key: cmake-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            cmake-${{ runner.os }}-

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install CMake
        uses: lukka/get-cmake@latest
        with:
          disable-cache: true 

      - name: Clean build directory
        run: rm -rf src/main/native/build

      - name: Build Native Library
        shell: bash
        run: |
          cd src/main/native
          mkdir -p build
          cd build
          
          # Выбор генератора для Windows
          if [ "${{ runner.os }}" = "Windows" ]; then
            cmake -G "Visual Studio 17 2022" -A x64 ..
            cmake --build . --config Release
          else
            cmake ..
            cmake --build .
          fi

      - name: Prepare Native Artifacts
        shell: bash
        run: |
          LIB_NAME="glslens"
          ARTIFACT_DIR="target/native"

          case "${{ runner.os }}" in
            "Windows")
              EXT="dll"
              SRC_PATH="src/main/native/build/Release/$LIB_NAME.$EXT"
              ;;
            "macOS")
              EXT="dylib"
              SRC_PATH="src/main/native/build/lib$LIB_NAME.$EXT"
              ;;
            *)
              EXT="so"
              SRC_PATH="src/main/native/build/lib$LIB_NAME.$EXT"
              ;;
          esac

          OS_DIR=$(echo "${{ runner.os }}" | tr '[:upper:]' '[:lower:]')
          mkdir -p "$ARTIFACT_DIR/$OS_DIR"
          cp "$SRC_PATH" "$ARTIFACT_DIR/$OS_DIR/"
          
          # Для отладки: показать структуру папок
          ls -R "$ARTIFACT_DIR"

      - name: Upload Native Artifact
        uses: actions/upload-artifact@v4
        with:
          name: native-${{ runner.os }}
          path: ${{ github.workspace }}/target/native
          retention-days: 1

  package-jar:
    needs: build-native
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare Native Resources
        shell: bash
        run: |
          mkdir -p target/native
          
          # Копирование для каждой ОС
          for os_dir in artifacts/native-*/; do
            os=$(basename "$os_dir" | cut -d '-' -f2- | tr -d '}')
            cp -R "$os_dir/native/$os" target/native/
          done
          
          # Проверка структуры
          tree target/native

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build JAR
        run: mvn package -DskipTests
